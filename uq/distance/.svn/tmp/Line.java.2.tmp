/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.uq.itee.distance;

/**
 *
 * @author uqhsu1
 */
public class Line {
<<<<<<< .working
<<<<<<< .mine
    public Point startPoint;
    public Point endPoint;
=======
    Point startPoint;
    Point endPoint;
>>>>>>> .merge-right.r72
    public double k=0;
    public double b=0;
    public boolean isKZero=false;
    public double x=0;
=======
    public Point startPoint;
    public Point endPoint;
    double k=0;
    double b=0;
    boolean isKZero=false;
    double x=0;
>>>>>>> .r73
    
    public Line(){
        startPoint=new Point();
        endPoint=new Point();
    }
    
    public Line(Point start, Point end){
        startPoint=start;
        endPoint=end;
        
        assert(startPoint.dimension==2);
        assert(endPoint.dimension==2);
        
        if(startPoint.coordinate[0]==endPoint.coordinate[0]){
            isKZero=true;
            x=startPoint.coordinate[0];
        }else{
            
            k=(endPoint.coordinate[1]-startPoint.coordinate[1])/(endPoint.coordinate[0]-startPoint.coordinate[0]);
            b=startPoint.coordinate[1]-k*startPoint.coordinate[0];
        }
    }
    
    public double getPointLineDistance(Point p){
        double result=0;
        if(isKZero){
            return Math.abs(p.coordinate[0]-x);
        }else{
            result=Math.abs(k*p.coordinate[0]+(-1)*p.coordinate[1]+b);
            result=result/(Math.sqrt(k*k+1));
            
        }
        return result;
    }
    
    public Point getIntersection(Line l){
        if(isKZero&&l.isKZero){
            return null;
        }else if(isKZero){
        double[] temp=new double[2];
        temp[0]=x;
        temp[1]=l.k*x+l.b;
        return new Point(temp);
        }else if(l.isKZero){
            double[] temp=new double[2];
        temp[0]=l.x;
        temp[1]=k*l.x+b;
        }else if(k==l.k){
            return null;
        }
        
        double[] temp=new double[2];
        temp[0]=(l.b-b)/(k-l.k);
        temp[1]=k*temp[0]+b;
        
        return new Point(temp);
    }
    
}
